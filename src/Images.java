import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import javax.imageio.ImageIO;

public class Images {
	public static final byte [] coolFace = {-119,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,20,0,0,0,20,2,3,0,0,0,-16,-25,-11,-98,0,0,0,12,80,76,84,69,97,98,108,0,0,0,-1,-2,3,-1,-1,-1,68,-74,16,-6,0,0,0,1,116,82,78,83,0,64,-26,-40,102,0,0,0,-125,73,68,65,84,8,29,1,120,0,-121,-1,0,0,1,85,64,0,0,0,22,-86,-108,0,0,0,106,-86,-87,0,0,1,-86,-86,-86,64,0,6,-86,-86,-86,-112,0,26,-86,-86,-86,-92,0,21,85,85,85,84,0,105,125,85,95,105,0,105,93,-86,87,105,0,105,85,-86,85,105,0,106,86,-86,-107,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,26,-86,-86,-86,-92,0,26,-90,-86,-102,-92,0,6,-87,85,106,-112,0,1,-86,-86,-86,64,0,0,106,-86,-87,0,0,0,22,-86,-108,0,0,0,1,85,64,0,117,72,41,10,113,-98,-84,91,0,0,0,0,73,69,78,68,-82,66,96,-126,};
	public static final byte [] happyFace = {-119,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,20,0,0,0,20,2,3,0,0,0,-16,-25,-11,-98,0,0,0,9,80,76,84,69,116,0,43,0,0,0,-1,-25,3,-43,56,22,3,0,0,0,1,116,82,78,83,0,64,-26,-40,102,0,0,0,-125,73,68,65,84,8,29,1,120,0,-121,-1,0,0,1,85,64,0,0,0,22,-86,-108,0,0,0,106,-86,-87,0,0,1,-86,-86,-86,64,0,6,-86,-86,-86,-112,0,26,-107,-86,86,-92,0,26,-107,-86,86,-92,0,106,-107,-86,86,-87,0,106,-107,-86,86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,26,-102,-86,-90,-92,0,26,-91,85,90,-92,0,6,-87,85,106,-112,0,1,-86,-86,-86,64,0,0,106,-86,-87,0,0,0,22,-86,-108,0,0,0,1,85,64,0,38,-64,43,83,38,20,6,113,0,0,0,0,73,69,78,68,-82,66,96,-126,};
	public static final byte [] okFace = {-119,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,20,0,0,0,20,2,3,0,0,0,-16,-25,-11,-98,0,0,0,9,80,76,84,69,101,0,97,0,0,0,-1,-56,3,-100,-28,82,107,0,0,0,1,116,82,78,83,0,64,-26,-40,102,0,0,0,-125,73,68,65,84,8,29,1,120,0,-121,-1,0,0,1,85,64,0,0,0,22,-86,-108,0,0,0,106,-86,-87,0,0,1,-86,-86,-86,64,0,6,-86,-86,-86,-112,0,26,-107,-86,86,-92,0,26,-107,-86,86,-92,0,106,-107,-86,86,-87,0,106,-107,-86,86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,26,-91,85,90,-92,0,26,-86,-86,-86,-92,0,6,-86,-86,-86,-112,0,1,-86,-86,-86,64,0,0,106,-86,-87,0,0,0,22,-86,-108,0,0,0,1,85,64,0,53,111,43,-3,74,78,-67,-113,0,0,0,0,73,69,78,68,-82,66,96,-126,};
	public static final byte [] sadFace = {-119,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,20,0,0,0,20,2,3,0,0,0,-16,-25,-11,-98,0,0,0,9,80,76,84,69,0,0,-122,0,0,0,-1,-115,3,-63,25,-75,89,0,0,0,1,116,82,78,83,0,64,-26,-40,102,0,0,0,-125,73,68,65,84,8,29,1,120,0,-121,-1,0,0,1,85,64,0,0,0,22,-86,-108,0,0,0,106,-86,-87,0,0,1,-86,-86,-86,64,0,6,-86,-86,-86,-112,0,26,-107,-86,86,-92,0,26,-107,-86,86,-92,0,106,-107,-86,86,-87,0,106,-107,-86,86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,26,-86,85,-86,-92,0,26,-87,-86,106,-92,0,6,-90,-86,-102,-112,0,1,-86,-86,-86,64,0,0,106,-86,-87,0,0,0,22,-86,-108,0,0,0,1,85,64,0,55,-27,43,-3,-86,87,54,94,0,0,0,0,73,69,78,68,-82,66,96,-126,};
	public static final byte [] angryFace = {-119,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,20,0,0,0,20,2,3,0,0,0,-16,-25,-11,-98,0,0,0,12,80,76,84,69,50,33,4,0,0,0,-1,61,6,-1,-1,-1,27,-94,-63,85,0,0,0,1,116,82,78,83,0,64,-26,-40,102,0,0,0,-125,73,68,65,84,8,29,1,120,0,-121,-1,0,0,1,85,64,0,0,0,22,-86,-108,0,0,0,106,-86,-87,0,0,1,-86,-86,-86,64,0,6,-86,-86,-86,-112,0,26,106,-86,-87,-92,0,26,-106,-86,-106,-92,0,106,-87,-86,106,-87,0,106,-106,105,-106,-87,0,106,-106,-86,-106,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,106,-86,-86,-86,-87,0,26,-86,85,-86,-92,0,26,-91,-86,90,-92,0,6,-102,-86,-90,-112,0,1,-86,-86,-86,64,0,0,106,-86,-87,0,0,0,22,-86,-108,0,0,0,1,85,64,0,88,82,44,82,10,126,-96,6,0,0,0,0,73,69,78,68,-82,66,96,-126,};	
	public static final byte [] drone0Pizza = {-119,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,72,0,0,0,73,4,3,0,0,0,108,-97,125,-47,0,0,0,24,80,76,84,69,0,0,0,0,0,0,-40,0,0,78,80,77,-10,52,46,51,-72,15,-110,-108,-111,-1,-1,-1,118,27,-74,49,0,0,0,1,116,82,78,83,0,64,-26,-40,102,0,0,0,-13,73,68,65,84,72,-57,-19,-106,-35,14,-126,48,12,-123,87,-119,-69,-26,72,-28,90,-33,-64,-123,-124,-25,-48,55,-128,-8,-2,-17,-32,-56,20,6,43,122,-30,79,-120,-58,-34,-19,-16,-91,105,-69,-47,-42,-104,95,-77,44,87,68,57,-116,-49,-42,41,80,-47,76,-124,115,-22,74,-22,-87,-94,-72,74,28,121,87,64,-20,76,-128,58,13,-64,58,32,58,2,-118,35,99,90,20,-125,43,113,40,-75,42,8,-54,33,-82,-94,-123,90,20,-81,-10,41,-6,-60,68,-93,58,-79,79,-47,-57,51,11,-35,92,117,21,-102,-121,108,-72,-120,-84,-47,-95,-85,22,-46,-74,-111,-94,64,119,-107,-9,65,-78,61,38,97,-82,79,-7,-110,-112,-52,94,-25,34,-112,127,-52,-63,-46,127,-79,-86,14,15,-95,42,-104,67,100,41,52,-6,-4,-121,94,-125,-104,-118,83,119,-89,-68,-126,124,-23,-105,-71,-38,19,127,-53,20,50,-78,-39,125,14,82,-70,10,3,61,-47,-60,-88,-98,73,117,95,-86,-113,83,19,-127,-101,45,-44,-108,-30,-26,29,53,57,-71,25,76,77,115,118,47,-96,54,12,110,87,-95,-74,-98,111,-77,11,-46,-116,51,118,80,0,-39,-47,0,0,0,0,73,69,78,68,-82,66,96,-126,};
	public static final byte [] drone1Pizza = {-119,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,72,0,0,0,73,4,3,0,0,0,108,-97,125,-47,0,0,0,24,80,76,84,69,0,0,0,0,0,0,-40,0,0,78,80,77,-10,52,46,51,-72,15,-110,-108,-111,-1,-1,-1,118,27,-74,49,0,0,0,1,116,82,78,83,0,64,-26,-40,102,0,0,1,56,73,68,65,84,72,-57,-19,-106,81,110,-125,48,12,-122,-29,86,-53,51,127,97,125,110,111,80,-124,-44,-25,85,-38,1,-42,27,80,-19,-2,119,-88,3,33,-92,-60,-55,60,109,-83,-44,105,6,33,-59,124,-4,-60,14,-40,49,-26,-81,-39,-70,18,-100,116,-72,29,-37,86,-128,-22,126,-31,-8,76,-91,-24,-72,-12,8,82,-119,16,75,1,-79,24,1,-57,116,2,-74,5,-94,33,32,8,25,115,65,61,75,81,-117,-83,-108,5,-62,118,-98,87,125,-127,-104,20,-10,-122,16,57,48,-110,40,-25,12,33,-14,124,-78,-48,36,-27,50,-28,-95,-9,-55,-34,2,100,-57,-123,88,-9,49,4,52,30,-14,-66,49,108,27,-98,98,-24,52,-100,49,-76,124,63,67,78,-90,-7,2,114,42,-18,82,-124,-102,19,0,-106,98,-120,94,63,-110,120,95,-50,-107,-125,-4,-15,112,-120,-78,-53,-55,-127,49,50,68,87,-128,-26,60,-107,-96,-112,-15,18,-28,-42,-50,-27,106,-80,-12,95,-20,-70,-125,-1,10,-14,80,55,90,-117,-56,82,-24,-26,-10,63,-12,51,72,-109,-15,97,-19,66,-75,-54,64,-47,-73,49,65,85,9,-110,-122,-65,13,-83,-10,-107,-7,54,100,104,-77,-69,31,36,-44,25,13,-108,-83,79,121,-105,-43,64,81,-11,-107,-96,126,89,-57,5,-54,-41,113,85,71,-48,-11,22,85,-105,-46,-11,59,85,-25,-44,-11,96,85,55,-41,-18,11,84,59,12,-35,94,69,-75,-21,121,54,-69,2,-8,48,83,26,-50,55,-50,115,0,0,0,0,73,69,78,68,-82,66,96,-126,};
	public static final byte [] drone2Pizza = {-119,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,60,0,0,0,60,4,3,0,0,0,-56,-46,-60,65,0,0,0,24,80,76,84,69,0,0,0,0,0,0,-40,0,0,78,80,77,-10,52,46,51,-72,15,-110,-108,-111,-1,-1,-1,118,27,-74,49,0,0,0,1,116,82,78,83,0,64,-26,-40,102,0,0,1,7,73,68,65,84,56,-53,-27,-107,49,14,-125,48,12,69,-125,90,49,-9,-117,-100,-128,27,84,72,-20,-111,-72,2,59,18,-9,-65,67,109,12,9,38,4,-73,82,59,-43,48,-112,60,-3,56,56,-79,-19,-100,88,-29,-108,-51,15,53,-84,122,-115,-21,-89,26,54,-109,-69,-112,31,-59,44,7,-42,79,32,19,-109,28,-112,5,42,32,19,-109,28,16,-1,13,-112,-117,121,-51,-59,127,-43,71,47,-102,-54,-10,-55,-17,25,-25,57,-110,-13,-90,75,-104,-28,-68,105,-63,-9,97,-75,-120,-35,-20,122,-73,-61,1,88,-79,76,-43,110,-118,3,-62,126,121,19,-34,57,34,28,72,26,-54,-40,-77,103,95,-62,97,0,-32,3,99,-116,-22,55,70,44,88,-98,31,-29,44,-116,52,65,59,103,-24,-117,56,-2,-9,57,-114,81,43,96,-114,57,-60,-44,77,-18,-70,110,59,-79,19,124,-21,-60,-112,76,99,28,-19,79,-16,101,88,-116,-96,-98,28,-55,-25,7,106,92,-121,-104,6,71,-36,66,-91,65,1,-89,-117,-36,126,15,111,41,120,-119,83,26,-68,-99,-2,70,-15,48,74,-113,81,-72,-116,-78,103,20,77,-85,-28,26,5,-37,42,-9,70,-77,-80,90,-115,-39,-88,-84,54,87,106,-110,47,17,-95,102,-29,76,59,2,108,0,0,0,0,73,69,78,68,-82,66,96,-126,};	
	/*
	 * gets the byte array corresponding to the wait time and then converts it to a image
	 * then returns the final image in a imageIcon form
	 */
	public static BufferedImage getEmoji(float waitTime) {
		byte [] emoji;
		
		if (waitTime <= 10) {
			emoji = coolFace;
		} else if (waitTime <= 20) {
			emoji = happyFace;
		} else if (waitTime <= 30) {
			emoji = okFace;
		} else if (waitTime <= 40) {
			emoji = sadFace;
		} else {
			emoji = angryFace;
		}
		
		// prints out supported image formats
		/*
		 * for (String format : ImageIO.getReaderFormatNames()) {
		 * System.out.println("format = " + format); } for (String format :
		 * ImageIO.getReaderMIMETypes()) { System.out.println("format = " + format); }
		 */
		BufferedImage img = null;
		try {
			img = ImageIO.read(new ByteArrayInputStream(emoji));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return img;	
	}
}
